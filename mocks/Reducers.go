// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

import user "gitlab.dusk.network/dusk-core/dusk-go/pkg/core/consensus/user"
import wire "gitlab.dusk.network/dusk-core/dusk-go/pkg/p2p/wire"

// Reducers is an autogenerated mock type for the Reducers type
type Reducers struct {
	mock.Mock
}

// FilterAbsentees provides a mock function with given fields: _a0, _a1, _a2
func (_m *Reducers) FilterAbsentees(_a0 []wire.Event, _a1 uint64, _a2 uint8) user.VotingCommittee {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 user.VotingCommittee
	if rf, ok := ret.Get(0).(func([]wire.Event, uint64, uint8) user.VotingCommittee); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(user.VotingCommittee)
	}

	return r0
}

// IsMember provides a mock function with given fields: _a0, _a1, _a2
func (_m *Reducers) IsMember(_a0 []byte, _a1 uint64, _a2 uint8) bool {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func([]byte, uint64, uint8) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Quorum provides a mock function with given fields:
func (_m *Reducers) Quorum(_a0 uint64) int {
	ret := _m.Called(_a0)

	var r0 int
	if rf, ok := ret.Get(0).(func(uint64) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}
